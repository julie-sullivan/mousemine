#------------------------------------------------------
[DEFAULT]

# Default comparison operator. Possible values: eq, ne, lt, le, gt, ge
# Comparison is: mgi-result operator mm-result.
# You can also provide the body of a lamda expression, with "x" bound to
# the mgi result and y bound to the mm result. So, for example
#	compare: le
# is the same as
#	compare: x <= y
# This allows you to do things like apply string operators, e.g.,
#	compare: x.lower() == y.lower()
#
compare: eq

# Filter function. The results of each query are passed through a filter
# function, specified as a lambda expression. The default does nothing, but
# a given test can override it.
filter: x

# A test gene to use.
testid:MGI:88388
testid2:MGI:97490

#------------------------------------------------------
# CONNECTION configs. 
#------------------------------------------------------
#

[CONNECTION:mgi]
host:adhoc.informatics.jax.org
database:mgd
user:mgd_public
password:mgdpub

[CONNECTION:mousemine]
host:localhost
database:mousemine
user:postgres
password:m@usw0rd

#------------------------------------------------------
# TESTS
#------------------------------------------------------

[TEST:counts of mouse protein coding genes should be equal]
mgi: 
	SELECT count(*)
	FROM MRK_MCV_Cache
	WHERE term='protein coding gene'

mousemine: 
	SELECT count(*)
	FROM gene g
	WHERE mgitype = 'protein coding gene'

#------------------------------------------------------
[TEST:basic data for mouse test gene  should be the same]
mgi:
	SELECT m.symbol, m.name, mc.genomicChromosome AS "chromosome", mc.startCoordinate AS "start"
	FROM MRK_Marker m, MRK_Location_Cache mc, ACC_Accession a
	WHERE a.accid = '%(testid)s'
	AND a._logicaldb_key = 1
	AND a._mgitype_key = 2
	AND a._object_key = m._marker_key
	AND m._marker_key = mc._marker_key

mousemine:
	SELECT g.symbol, g.name, c.primaryidentifier AS "chromosome", l.intermine_start AS "start"
	FROM gene g, location l, chromosome c
	WHERE g.primaryIdentifier = '%(testid)s'
	AND g.chromosomelocationid = l.id
	AND l.locatedonid = c.id


#------------------------------------------------------
[TEST:total number of alleles should be the same]
mgi: 
	SELECT count(*)
	FROM all_allele
	WHERE _marker_key is null
	OR _marker_key in (
	    SELECT _marker_key
	    FROM mrk_marker
	    WHERE _marker_status_key IN (1,3) /* exclude withdrawn markers! */
	    AND _organism_key = 1)

mousemine: 
	SELECT count(*)
	FROM allele 

#------------------------------------------------------
[TEST:counts of genotypes should be equal]
mgi: 
	SELECT count(*)
	FROM GXD_Genotype

mousemine: 
	SELECT count(*)
	FROM genotype g

#------------------------------------------------------
[TEST:count of publications should be a tiny bit less in MM]
mgi:
	SELECT count(*)
	from BIB_Refs

mousemine:
	SELECT count(*)
	from Publication
	where mgiid is not null

filter: x[0]['count']

compare: (x > y and (x-y)/x < .05)

#------------------------------------------------------
[TEST:the name of the test gene  gene is the same in both dbs]
mgi: 
	SELECT name
	FROM MRK_Marker
	WHERE _marker_key = (
	  SELECT _object_key
	  FROM ACC_Accession
	  WHERE accid = '%(testid)s'
	  AND _logicaldb_key = 1
	  AND _mgitype_key = 2
	  AND preferred = 1
	)

mousemine: 
	SELECT name
	FROM gene 
	WHERE primaryidentifier = '%(testid)s'

#------------------------------------------------------
[TEST:number of alleles for test gene  should be the same]
mgi: 
	SELECT count(*)
	FROM ALL_Allele
	WHERE _marker_key = (
	   SELECT _object_key
	   FROM ACC_Accession
	   WHERE accid='%(testid)s'
	   AND _logicaldb_key = 1
	   AND _mgitype_key = 2
	   AND preferred = 1)

mousemine: 
	SELECT count(*)
	FROM allele 
	WHERE featureid = (
	    SELECT id
	    FROM gene
	    WHERE primaryIdentifier = '%(testid)s')

#------------------------------------------------------
[TEST:number of genotypes for test gene  should be the same]
mgi: 
	SELECT count(distinct _genotype_key)
	FROM GXD_AlleleGenotype
	WHERE _marker_key = (
           SELECT _object_key
           FROM ACC_Accession
           WHERE accid='%(testid)s'
           AND _logicaldb_key = 1
           AND _mgitype_key = 2
           AND preferred = 1)

mousemine: 
	SELECT count(distinct genotypes)
	FROM allelesgenotypes
	WHERE alleles IN (
	  SELECT id 
	  FROM allele
	  WHERE featureid = (
	    SELECT id 
	    FROM gene 
	    WHERE primaryIdentifier = '%(testid)s'))

#------------------------------------------------------
[TEST: number of GO annotations for the test gene]
mgi:
	SELECT count(*)
	FROM VOC_Annot va, ACC_Accession aa
	WHERE va._annottype_key = 1000
	AND va._object_key = aa._object_key
	AND aa._mgitype_key = 2
	AND aa._logicaldb_key = 1
	AND aa.preferred = 1
	AND aa.accid = '%(testid)s'

mousemine:
	SELECT count(*)
	FROM goannotation ga, gene g
	WHERE ga.subjectid = g.id
	AND g.primaryIdentifier = '%(testid)s'

#------------------------------------------------------
[TEST:distinct phenotype term ids annotated to genotypes for test gene]
mgi:
	SELECT distinct aa2.accid as "id"
	FROM VOC_Annot va, GXD_AlleleGenotype ag, ACC_Accession aa, ACC_Accession aa2
	WHERE va._annottype_key = 1002
	AND va._object_key = ag._genotype_key
	AND ag._marker_key = aa._object_key
	AND aa._logicaldb_key = 1
	AND aa.preferred = 1
	AND aa._mgitype_key = 2
	AND aa.accid = '%(testid)s'
	AND aa2._object_key = va._term_key
	AND aa2._mgitype_key = 13
	AND aa2._logicaldb_key = 34
	AND aa2.preferred = 1

mousemine:
	SELECT distinct mp.identifier as "id"
	FROM OntologyAnnotation oa, MPTerm mp, GenotypeAllelePair ga, Gene g
	WHERE oa.ontologytermid = mp.id
	AND oa.subjectid = ga.genotypeid
	AND ga.featureid = g.id
	AND g.primaryIdentifier = '%(testid)s'

#------------------------------------------------------
[TEST:Number of GXD anatomy terms is one more than the number EMAPXTerms with MGI IDs]
mgi:
	SELECT count(*) as "count"
	FROM GXD_structure

mousemine:
	SELECT a.tot + b.tot +1 as "count"
        FROM (SELECT count(*) as tot FROM emapxterm WHERE identifier like 'MGI%') as a,
             (SELECT count(*) as tot FROM ontologytermsynonym WHERE name like 'MGI%' ) as b

#------------------------------------------------------
[TEST:Number of MP annotations specific to female]
mgi:
	SELECT count(distinct a._annot_key) as "count"
	FROM 
	    VOC_Evidence_Property p,
	    VOC_Evidence e,
	    VOC_Annot a
	WHERE p._annotevidence_key = e._annotevidence_key
	AND e._annot_key = a._annot_key
	AND a._annottype_key = 1002
	AND p.value in ('F','f')

mousemine:
	SELECT count(*) as count
	FROM OntologyAnnotation a, MPTerm t
	WHERE a.annotationExtension = 'specific_to(female)'
	AND a.ontologytermid = t.id

#------------------------------------------------------
[TEST:Number of MP annotations specific to male]
mgi:
	SELECT count(distinct a._annot_key) as "count"
	FROM 
	    VOC_Evidence_Property p,
	    VOC_Evidence e,
	    VOC_Annot a
	WHERE p._annotevidence_key = e._annotevidence_key
	AND e._annot_key = a._annot_key
	AND a._annottype_key = 1002
	AND p.value in ('M','m')

mousemine:
	SELECT count(*) as count
	FROM OntologyAnnotation a, MPTerm t
	WHERE a.annotationExtension = 'specific_to(male)'
	AND a.ontologytermid = t.id
